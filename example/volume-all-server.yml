version: '3'

networks:
  openim-server:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: '${DOCKER_BRIDGE_SUBNET}'
          gateway: '${DOCKER_BRIDGE_GATEWAY}'

volumes:
  mysql_data:
  mongo_db:
  mongo_logs:
  mongo_conf:
  redis_data:
  kafka_data:
  minio_data:
  minio_config:
  grafana_data:

services:
  mysql:
    image: mysql:5.7
    ports:
      - "${MYSQL_PORT}:3306"
    container_name: mysql
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_PASSWORD}"
    restart: always
    networks:
      openim-server:
        ipv4_address: ${MYSQL_NETWORK_ADDRESS}

  mongodb:
    image: mongo:6.0.2
    ports:
      - "${MONGO_PORT}:27017"
    container_name: mongo
    command: --wiredTigerCacheSizeGB 1 --auth
    volumes:
      - mongo_db:/data/db
      - mongo_logs:/data/logs
      - mongo_conf:/etc/mongo
    environment:
      - TZ=Asia/Shanghai
      - wiredTigerCacheSizeGB=1
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    restart: always
    networks:
      openim-server:
        ipv4_address: ${MONGO_NETWORK_ADDRESS}

  redis:
    image: redis:7.0.0
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    environment:
      TZ: Asia/Shanghai
    restart: always
    sysctls:
      net.core.somaxconn: 1024
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    networks:
      openim-server:
        ipv4_address: ${REDIS_NETWORK_ADDRESS}

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
     - "${ZOOKEEPER_PORT}:2181"
    volumes:
     - "/etc/localtime:/etc/localtime"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - TZ="Asia/Shanghai"
    restart: always
    networks:
       openim-server:
         ipv4_address: ${ZOOKEEPER_NETWORK_ADDRESS}

  kafka:
    image: 'bitnami/kafka:3.5.1'
    container_name: kafka
    user: root
    restart: always
    ports:
      - "${KAFKA_PORT}:9092"
    volumes:
      - kafka_data:/bitnami/kafka
      - ./openim-server/${SERVER_BRANCH}/scripts/create-topic.sh:/opt/bitnami/kafka/create-topic.sh
    command: >
      bash -c "
      /opt/bitnami/scripts/kafka/run.sh & sleep 5; /opt/bitnami/kafka/create-topic.sh; wait
      "
    environment:
      - TZ=Asia/Shanghai
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@<your_host>:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://${DOCKER_BRIDGE_GATEWAY}:${KAFKA_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      openim-server:
        ipv4_address: ${KAFKA_NETWORK_ADDRESS}

  minio:
    image: minio/minio
    ports:
      - "${MINIO_PORT}:9000"
      - "9090:9090"
    container_name: minio
    volumes:
      - minio_data:/data
      - minio_config:/root/.minio
    environment:
      MINIO_ROOT_USER: "${MINIO_ACCESS_KEY}"
      MINIO_ROOT_PASSWORD: "${MINIO_SECRET_KEY}"
    restart: always
    command: minio server /data --console-address ':9090'
    networks:
      openim-server:
        ipv4_address: ${MINIO_NETWORK_ADDRESS}

  openim-web:
    image: ${IMAGE_REGISTRY}/openim-web:latest
    container_name: openim-web
    environment:
      - OPENIM_WEB_DIST_PATH=${OPENIM_WEB_DIST_PATH}
      - OPENIM_WEB_PORT=${OPENIM_WEB_PORT}
    restart: always
    ports:
      - "${OPENIM_WEB_PORT}:11001"
    networks:
      openim-server:
        ipv4_address: ${OPENIM_WEB_NETWORK_ADDRESS}

  openim-server:
    image: ${IMAGE_REGISTRY}/openim-server:${SERVER_BRANCH}
    container_name: openim-server
    ports:
      - ${OPENIM_WS_PORT}:10001
      - ${API_OPENIM_PORT}:10002
    healthcheck:
      test: ["CMD", "/openim/openim-server/scripts/check-all.sh"]
      interval: 60s
      timeout: 10s
      retries: 5
    volumes:
      - ./openim-server/${SERVER_BRANCH}/logs:/openim/openim-server/logs
      - ./openim-server/${SERVER_BRANCH}/_output/logs:/openim/openim-server/_output/logs
      - ./openim-server/${SERVER_BRANCH}/config:/openim/openim-server/config
      - ./openim-server/${SERVER_BRANCH}/scripts:/openim/openim-server/scripts
    restart: always
    depends_on:
      - kafka
      - mysql
      - mongodb
      - redis
      - minio
    logging:
      driver: json-file
      options:
        max-size: "1g"
        max-file: "2"
    networks:
      openim-server:
        ipv4_address: ${OPENIM_SERVER_NETWORK_ADDRESS}

  openim-chat:
    image: ${IMAGE_REGISTRY}/openim-chat:${CHAT_BRANCH}
    container_name: openim-chat
    healthcheck:
      test: ["CMD", "/openim/openim-chat/scripts/check_all.sh"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - ${OPENIM_CHAT_API_PORT}:10008
      - ${OPENIM_ADMIN_API_PORT}:10009
    volumes:
      - ./openim-chat/${CHAT_BRANCH}/logs:/openim/openim-chat/logs
      - ./openim-chat/${CHAT_BRANCH}/_output/logs:/openim/openim-chat/_output/logs
      - ./openim-chat/${CHAT_BRANCH}/config:/openim/openim-chat/config
      - ./openim-chat/${CHAT_BRANCH}/scripts:/openim/openim-chat/scripts
    restart: always
    depends_on:
      - mysql
      - mongodb
      - redis
      - minio
      - openim-server
    logging:
      driver: json-file
      options:
        max-size: "1g"
        max-file: "2"
    networks:
      openim-server:
        ipv4_address: ${OPENIM_CHAT_NETWORK_ADDRESS}

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
    restart: always
    volumes:
      - ./openim-server/${SERVER_BRANCH}/config/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      openim-server:
        ipv4_address: ${PROMETHEUS_NETWORK_ADDRESS}

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    user: root
    restart: always
    ports:
      - "${GRAFANA_PORT}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      openim-server:
        ipv4_address: ${GRAFANA_NETWORK_ADDRESS}

  node-exporter:
    image: quay.io/prometheus/node-exporter
    container_name: node-exporter
    hostname: node-exporter
    restart: always
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    networks:
      openim-server:
        ipv4_address: ${NODE_EXPORTER_NETWORK_ADDRESS}
